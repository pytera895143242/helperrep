from aiogram import types
from misc import dp, bot
import sqlite3
from .sqlit import info_members, cheak_traf, cheak_chat_id, reg_links, get_links, obnovatrafika1, obnovatrafika2, obnovatrafika3, \
    obnovatrafika4, obnovatrafika5, obnovatrafika6, obnovatrafika7, obnovatrafika8
import asyncio
import random
from .sqlit import delite_user
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils.exceptions import BotBlocked, ChatNotFound

ADMIN_ID = [1307813926, 494588959]


class reg(StatesGroup):
    name = State()
    fname = State()


class st_reg(StatesGroup):
    st_name = State()
    st_fname = State()
    step_q = State()
    step_regbutton = State()


class del_user(StatesGroup):
    del_name = State()
    del_fname = State()


class generate(StatesGroup):
    step1 = State()
    step2 = State()


class reg_trafik(StatesGroup):
    traf1 = State()
    traf2 = State()


class reg_trafik2(StatesGroup):
    traf1 = State()
    traf2 = State()


class reg_trafik3(StatesGroup):
    traf1 = State()
    traf2 = State()


class reg_trafik4(StatesGroup):
    traf1 = State()
    traf2 = State()


class reg_trafik5(StatesGroup):
    traf1 = State()
    traf2 = State()


class reg_trafik6(StatesGroup):
    traf1 = State()
    traf2 = State()


class reg_trafik7(StatesGroup):
    traf1 = State()
    traf2 = State()


class reg_trafik8(StatesGroup):
    traf1 = State()
    traf2 = State()


@dp.message_handler(commands=['admin'])
async def admin_ka(message: types.Message):
    id = message.from_user.id
    if id in ADMIN_ID:
        markup = types.InlineKeyboardMarkup()

        bat_generator = types.InlineKeyboardButton(text='–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç—Ä–æ–∫', callback_data='generate_strok')
        # bat_vie_stat = types.InlineKeyboardButton(text='–ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å—Ç—Ä–æ–∫', callback_data='vie_stat')
        # bat_posting = types.InlineKeyboardButton(text='–ü–æ—Å—Ç –≤–æ –≤—Å–µ –∫–∞–Ω–∞–ª—ã', callback_data='post_all')
        bat_setin = types.InlineKeyboardButton(text='–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç—Ä–∞—Ñ–∏–∫–∞', callback_data='settings')

        # bat_j = types.InlineKeyboardButton(text='–°–∫–∞—á–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö', callback_data='baza')

        markup.add(bat_generator)
        # markup.add(bat_vie_stat)
        markup.add(bat_setin)
        # markup.add(bat_posting)
        # markup.add(bat_j)

        await bot.send_message(message.chat.id, '–í—ã–ø–æ–ª–Ω–µ–Ω –≤—Ö–æ–¥ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', reply_markup=markup)

@dp.callback_query_handler(text='vie_stat')
async def vie_stat(call: types.callback_query, state: FSMContext):
    message_text = " "
    for groop in get_links():
        message_text += f"{groop[0]} -- \n"

    print(message_text)


@dp.callback_query_handler(text='generate_strok')
async def generate_strok1(call: types.callback_query, state: FSMContext):
    await bot.send_message(chat_id=call.message.chat.id, text="–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–Ω–æ–ø–∫–∏")
    await generate.step1.set()


@dp.message_handler(state=generate.step1, content_types=['text', 'photo', 'video'])
async def generate_strok2(message: types.Message, state: FSMContext):
    ids = cheak_chat_id()  # –°–ø–∏—Å–æ–∫ ID –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤

    if random.randint(1,2) == 1:
        print("–ü–µ—Ä–≤—ã–π –∑–∞–∫—Ä—ã—Ç")
        link1 = await bot.create_chat_invite_link(chat_id=ids[0], name = message.text, creates_join_request= True)
        link2 = await bot.create_chat_invite_link(chat_id=ids[1], name = message.text)
        link3 = await bot.create_chat_invite_link(chat_id=ids[2], name = message.text, creates_join_request= True)
        link4 = await bot.create_chat_invite_link(chat_id=ids[3], name = message.text)
        link5 = await bot.create_chat_invite_link(chat_id=ids[4], name = message.text, creates_join_request= True)
        link6 = await bot.create_chat_invite_link(chat_id=ids[5], name = message.text)
        link7 = await bot.create_chat_invite_link(chat_id=ids[6], name = message.text, creates_join_request= True)

    else:
        link1 = await bot.create_chat_invite_link(chat_id=ids[0], name=message.text)
        link2 = await bot.create_chat_invite_link(chat_id=ids[1], name=message.text, creates_join_request= True)
        link3 = await bot.create_chat_invite_link(chat_id=ids[2], name=message.text)
        link4 = await bot.create_chat_invite_link(chat_id=ids[3], name=message.text, creates_join_request= True)
        link5 = await bot.create_chat_invite_link(chat_id=ids[4], name=message.text)
        link6 = await bot.create_chat_invite_link(chat_id=ids[5], name=message.text, creates_join_request= True)
        link7 = await bot.create_chat_invite_link(chat_id=ids[6], name=message.text)



    await bot.send_message(chat_id=message.chat.id, text=f"""<b>üëëüíû–ì–î–ï-–¢–û –ó–î–ï–°–¨ –°–ü–†–Ø–¢–ê–ù –î–û–†–û–ì–û–ô –ö–û–ù–¢–ï–ù–¢ –ò–ó –î–ê–†–ö–ù–ï–¢–ê:</b>
<b>
1Ô∏è‚É£ {link1.invite_link}
2Ô∏è‚É£ {link2.invite_link}
3Ô∏è‚É£ {link3.invite_link}
4Ô∏è‚É£ {link4.invite_link}
5Ô∏è‚É£ {link5.invite_link}
6Ô∏è‚É£ {link6.invite_link}
7Ô∏è‚É£ {link7.invite_link}</b>

<b><i>(–∫—É–ø–∏–ª–∏ –µ–≥–æ –∑–∞ 19.000‚ÇΩ. –≤–ø—É—Å–∫–∞–µ–º –≤ —Ç–µ—á–µ–Ω–∏–∏ —á–∞—Å–∞ –∏ —É–¥–∞–ª—è–µ–º –ø–æ–∫–∞ –Ω–µ –∑–∞–±–∞–Ω–∏–ª–∏)</i></b>
""",parse_mode='html')


    await bot.send_message(chat_id=message.chat.id, text= f"""<b>
<a href = '{link1.invite_link}'>üíï–ë–£–•–ò–ï –°–¢–£–î–ï–ù–¢–ö–ò</a>
<a href = '{link2.invite_link}'>üî•–ì–û–†–Ø–ß–ò–ï –ü–ò–°–Æ–•–ò</a>
<a href = '{link3.invite_link}'>üí¶NE SHK–û–õ–¨N–ò–¶–´</a>
<a href = '{link4.invite_link}'>ü©∏–¢–í–û–ò –ü–û–î–†–£–ì–ò</a>
<a href = '{link5.invite_link}'>ü•∂–ü–û–°–õ–ï –£–†–û–ö–û–í</a>
<a href = '{link6.invite_link}'>ü§¨–õ–ï–ù–ï –ü–û–†–í–ê–õ–ò –ê–ù–ê–õ</a>
<a href = '{link7.invite_link}'>üá∑üá∫–†–£–°–°–ö–ê–Ø –î–û–ú–ê–®–ö–ê</a>


(–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∑–∞–≥–ª—è–Ω–∏ –≤–æ –≤—Å–µ –∫–∞–Ω–∞–ª—ãüôÑüíï)</b>""",parse_mode='html')
    await state.finish()


# –ù–ê–°–¢–†–û–ô–ö–ê –¢–†–ê–§–ò–ö–ê
@dp.callback_query_handler(text='settings')
async def baza12(call: types.callback_query):
    markup_traf = types.InlineKeyboardMarkup()
    bat_a = types.InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å 1 –∫–∞–Ω–∞–ª', callback_data='change_trafik1')
    bat_a2 = types.InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å 2 –∫–∞–Ω–∞–ª', callback_data='change_trafik2')
    bat_a3 = types.InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å 3 –∫–∞–Ω–∞–ª', callback_data='change_trafik3')
    bat_a4 = types.InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å 4 –∫–∞–Ω–∞–ª', callback_data='change_trafik4')
    bat_a5 = types.InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å 5 –∫–∞–Ω–∞–ª', callback_data='change_trafik5')
    bat_a6 = types.InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å 6 –∫–∞–Ω–∞–ª', callback_data='change_trafik6')
    bat_a7 = types.InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å 7 –∫–∞–Ω–∞–ª', callback_data='change_trafik7')
    bat_a8 = types.InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å 8 –∫–∞–Ω–∞–ª', callback_data='change_trafik8')

    bat_c = types.InlineKeyboardButton(text='–ó–ê–ö–†–´–¢–¨', callback_data='otemena')

    markup_traf.add(bat_a)
    markup_traf.add(bat_a2)
    markup_traf.add(bat_a3)
    markup_traf.add(bat_a4)
    markup_traf.add(bat_a5)
    markup_traf.add(bat_a6)
    markup_traf.add(bat_a7)
    # markup_traf.add(bat_a8)

    markup_traf.add(bat_c)  # close

    list = cheak_traf()
    await bot.send_message(call.message.chat.id, text=f'<b>–°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç:</b>\n\n'
                                                      f'–ü–µ—Ä–≤—ã–π –∫–∞–Ω–∞–ª: {list[0]}\n'
                                                      f'–í—Ç–æ—Ä–æ–π –∫–∞–Ω–∞–ª: {list[1]}\n'
                                                      f'–¢—Ä–µ—Ç–∏–π –∫–∞–Ω–∞–ª: {list[2]}\n\n'
                                                      f'–ß–µ—Ç–≤–µ—Ä—Ç—ã–π –∫–∞–Ω–∞–ª: {list[3]}\n'
                                                      f'–ü—è—Ç—ã–π –∫–∞–Ω–∞–ª {list[4]}\n'
                                                      f'–®–µ—Å—Ç–æ–π –∫–∞–Ω–∞–ª: {list[5]}\n'
                                                      f'–°–µ–¥—å–º–æ–π –∫–∞–Ω–∞–ª: {list[6]}\n', parse_mode='html',
                           reply_markup=markup_traf, disable_web_page_preview=True)


@dp.callback_query_handler(text='change_trafik1')  # –ò–∑–º–µ–Ω–µ–Ω–∏–µ 1-–≥–æ –∫–∞–Ω–∞–ª–∞
async def baza12342(call: types.callback_query):
    markup = types.InlineKeyboardMarkup()
    bat_a = types.InlineKeyboardButton(text='–û–¢–ú–ï–ù–ê', callback_data='otemena')
    markup.add(bat_a)

    await bot.send_message(call.message.chat.id, text='–û—Ç–ø—Ä–∞–≤—å –Ω–∞ 1-–π –∫–∞–Ω–∞–ª\n', parse_mode='html', reply_markup=markup)
    await reg_trafik.traf1.set()


@dp.message_handler(state=reg_trafik.traf1, content_types='text')
async def traf_obnovlenie1(message: types.Message, state: FSMContext):
    await state.update_data(link_one=message.text)
    await bot.send_message(chat_id=message.chat.id,
                           text=f'–¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ—à–ª–∏ –º–Ω–µ –ª—é–±–æ–π –ø–æ—Å—Ç –∏–∑ —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞ ({message.text})')
    await reg_trafik.traf2.set()


@dp.message_handler(state=reg_trafik.traf2, content_types=['text', 'photo', 'video'])
async def traf_obnovlenie(message: types.Message, state: FSMContext):
    link = await state.get_data()

    link_one = link['link_one']  # –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª
    id_channel1 = (message.forward_from_chat.id)  # ID –∫–∞–Ω–∞–ª–∞

    try:
        obnovatrafika1(link_one, id_channel1)  # –í–Ω–µ—Å–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö

        await bot.send_message(chat_id=message.chat.id, text='–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ')
        try:
            await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
        except:
            pass
        await state.finish()

    except:
        await bot.send_message(chat_id=message.chat.id,
                               text='–û—à–∏–±–∫–∞! –í—ã —Å–¥–µ–ª–∞–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–Ω–æ–≤–∞ –∑–∞–π—Ç–∏ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –∏ –≤—ã–±—Ä–∞—Ç—å –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç')
        await state.finish()


# –†–ï–î–ê–ö–¢–ò–†–£–ï–ú –í–¢–û–†–û–ô –ö–ê–ù–ê–õ
@dp.callback_query_handler(text='change_trafik2')  # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è
async def baza12342_2(call: types.callback_query):
    markup = types.InlineKeyboardMarkup()
    bat_a = types.InlineKeyboardButton(text='–û–¢–ú–ï–ù–ê', callback_data='otemena')
    markup.add(bat_a)

    await bot.send_message(call.message.chat.id, text='–û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ –≤—Ç–æ—Ä–æ–π –∫–∞–Ω–∞–ª\n', parse_mode='html',
                           reply_markup=markup)
    await reg_trafik2.traf1.set()


@dp.message_handler(state=reg_trafik2.traf1, content_types='text')
async def traf_obnovlenie2(message: types.Message, state: FSMContext):
    await state.update_data(link_one=message.text)
    await bot.send_message(chat_id=message.chat.id,
                           text=f'–¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ—à–ª–∏ –º–Ω–µ –ª—é–±–æ–π –ø–æ—Å—Ç –∏–∑ —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞ ({message.text})')
    await reg_trafik2.traf2.set()


@dp.message_handler(state=reg_trafik2.traf2, content_types=['text', 'photo', 'video'])
async def traf_obnovlenie_2(message: types.Message, state: FSMContext):
    link = await state.get_data()

    link_one = link['link_one']  # –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª
    id_channel2 = (message.forward_from_chat.id)  # ID –∫–∞–Ω–∞–ª–∞

    try:
        obnovatrafika2(link_one, id_channel2)  # –í–Ω–µ—Å–µ–Ω–∏–µ 2-–≥–æ –Ω–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö

        await bot.send_message(chat_id=message.chat.id, text='–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ')
        try:
            await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
        except:
            pass
        await state.finish()

    except:
        await bot.send_message(chat_id=message.chat.id,
                               text='–û—à–∏–±–∫–∞! –í—ã —Å–¥–µ–ª–∞–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–Ω–æ–≤–∞ –∑–∞–π—Ç–∏ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –∏ –≤—ã–±—Ä–∞—Ç—å –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç')
        await state.finish()


# –†–ï–î–ê–ö–¢–ò–†–£–ï–ú –¢–†–ï–¢–ò–ô –ö–ê–ù–ê–õ
@dp.callback_query_handler(text='change_trafik3')  # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è
async def baza12342_3(call: types.callback_query):
    markup = types.InlineKeyboardMarkup()
    bat_a = types.InlineKeyboardButton(text='–û–¢–ú–ï–ù–ê', callback_data='otemena')
    markup.add(bat_a)

    await bot.send_message(call.message.chat.id, text='–û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ —Ç—Ä–µ—Ç–∏–π –∫–∞–Ω–∞–ª\n', parse_mode='html',
                           reply_markup=markup)
    await reg_trafik3.traf1.set()


@dp.message_handler(state=reg_trafik3.traf1, content_types='text')
async def traf_obnovlenie3(message: types.Message, state: FSMContext):
    await state.update_data(link_one=message.text)
    await bot.send_message(chat_id=message.chat.id,
                           text=f'–¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ—à–ª–∏ –º–Ω–µ –ª—é–±–æ–π –ø–æ—Å—Ç –∏–∑ —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞ ({message.text})')
    await reg_trafik3.traf2.set()


@dp.message_handler(state=reg_trafik3.traf2, content_types=['text', 'photo', 'video'])
async def traf_obnovlenie_3(message: types.Message, state: FSMContext):
    link = await state.get_data()

    link_one = link['link_one']  # –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª
    id_channel3 = (message.forward_from_chat.id)  # ID –∫–∞–Ω–∞–ª–∞

    try:
        obnovatrafika3(link_one, id_channel3)  # –í–Ω–µ—Å–µ–Ω–∏–µ 3-–≥–æ –Ω–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await bot.send_message(chat_id=message.chat.id, text='–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ')
        try:
            await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
        except:
            pass
        await state.finish()

    except:
        await bot.send_message(chat_id=message.chat.id,
                               text='–û—à–∏–±–∫–∞! –í—ã —Å–¥–µ–ª–∞–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–Ω–æ–≤–∞ –∑–∞–π—Ç–∏ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –∏ –≤—ã–±—Ä–∞—Ç—å –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç')
        await state.finish()


# –†–ï–î–ê–ö–¢–ò–†–£–ï–ú –ø–µ—Ä–≤—ã–π –ö–ê–ù–ê–õ
@dp.callback_query_handler(text='change_trafik4')  # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è
async def baza12342_4(call: types.callback_query):
    markup = types.InlineKeyboardMarkup()
    bat_a = types.InlineKeyboardButton(text='–û–¢–ú–ï–ù–ê', callback_data='otemena')
    markup.add(bat_a)

    await bot.send_message(call.message.chat.id, text='–û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É —á–µ—Ç–≤–µ—Ä—Ç—ã–π –∫–∞–Ω–∞–ª\n', parse_mode='html',
                           reply_markup=markup)
    await reg_trafik4.traf1.set()


@dp.message_handler(state=reg_trafik4.traf1, content_types='text')
async def traf_obnovlenie44(message: types.Message, state: FSMContext):
    await state.update_data(link_one=message.text)
    await bot.send_message(chat_id=message.chat.id,
                           text=f'–¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ—à–ª–∏ –º–Ω–µ –ª—é–±–æ–π –ø–æ—Å—Ç –∏–∑ —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞ ({message.text})')
    await reg_trafik4.traf2.set()


@dp.message_handler(state=reg_trafik4.traf2, content_types=['text', 'photo', 'video'])
async def traf_obnovlenie_4(message: types.Message, state: FSMContext):
    link = await state.get_data()

    link_one = link['link_one']  # –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª
    id_channel4 = (message.forward_from_chat.id)  # ID –∫–∞–Ω–∞–ª–∞

    try:
        obnovatrafika4(link_one, id_channel4)  # –í–Ω–µ—Å–µ–Ω–∏–µ 2-–≥–æ –Ω–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö

        await bot.send_message(chat_id=message.chat.id, text='–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ')
        try:
            await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
        except:
            pass
        await state.finish()

    except:
        await bot.send_message(chat_id=message.chat.id,
                               text='–û—à–∏–±–∫–∞! –í—ã —Å–¥–µ–ª–∞–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–Ω–æ–≤–∞ –∑–∞–π—Ç–∏ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –∏ –≤—ã–±—Ä–∞—Ç—å –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç')
        await state.finish()


# –†–ï–î–ê–ö–¢–ò–†–£–ï–ú –≤—Ç–æ—Ä–æ–π –ö–ê–ù–ê–õ
@dp.callback_query_handler(text='change_trafik5')  # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è
async def baza12342_5(call: types.callback_query):
    markup = types.InlineKeyboardMarkup()
    bat_a = types.InlineKeyboardButton(text='–û–¢–ú–ï–ù–ê', callback_data='otemena')
    markup.add(bat_a)

    await bot.send_message(call.message.chat.id, text='–û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ –Ω–æ–≤—ã–π, –ø—è—Ç—ã–π –ø–æ —Å—á–µ—Ç—É –∫–∞–Ω–∞–ª\n',
                           parse_mode='html', reply_markup=markup)
    await reg_trafik5.traf1.set()


@dp.message_handler(state=reg_trafik5.traf1, content_types='text')
async def traf_obnovlenie5(message: types.Message, state: FSMContext):
    await state.update_data(link_one=message.text)
    await bot.send_message(chat_id=message.chat.id,
                           text=f'–¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ—à–ª–∏ –º–Ω–µ –ª—é–±–æ–π –ø–æ—Å—Ç –∏–∑ —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞ ({message.text})')
    await reg_trafik5.traf2.set()


@dp.message_handler(state=reg_trafik5.traf2, content_types=['text', 'photo', 'video'])
async def traf_obnovlenie_5(message: types.Message, state: FSMContext):
    link = await state.get_data()

    link_one = link['link_one']  # –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª
    id_channel5 = (message.forward_from_chat.id)  # ID –∫–∞–Ω–∞–ª–∞

    try:
        obnovatrafika5(link_one, id_channel5)  # –í–Ω–µ—Å–µ–Ω–∏–µ 5-–≥–æ –Ω–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö

        await bot.send_message(chat_id=message.chat.id, text='–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ')
        try:
            await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
        except:
            pass
        await state.finish()

    except:
        await bot.send_message(chat_id=message.chat.id,
                               text='–û—à–∏–±–∫–∞! –í—ã —Å–¥–µ–ª–∞–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–Ω–æ–≤–∞ –∑–∞–π—Ç–∏ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –∏ –≤—ã–±—Ä–∞—Ç—å –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç')
        await state.finish()


# –ö–æ–Ω–µ—Ü –æ–±–Ω–æ–≤–ª—è–ª–∫–∏ –∫–∞–Ω–∞–ª–æ–≤

@dp.callback_query_handler(text='baza')
async def baza(call: types.callback_query):
    a = open('server.db', 'rb')
    await bot.send_document(chat_id=call.message.chat.id, document=a)


@dp.callback_query_handler(text='list_members')  # –ê–î–ú–ò–ù –ö–ù–û–ü–ö–ê –¢–†–ê–§–ò–ö–ê
async def check(call: types.callback_query):
    a = info_members()  # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞ sqlit
    await bot.send_message(call.message.chat.id, f'<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {a[0]}</b>\n\n'
                                                 f'–ü—Ä–æ—à–ª–∏ –ø—Ä–æ–≥—Ä–µ–≤: {a[1]}\n'
                                                 f'–ü—Ä–æ–≥—Ä–µ–≤–∞—é—Ç—Å—è: {a[2]}')


# –†–ï–î–ê–ö–¢–ò–†–£–ï–ú —Ç—Ä–µ—Ç–∏–π –ö–ê–ù–ê–õ
@dp.callback_query_handler(text='change_trafik6')  # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è
async def baza12342_53(call: types.callback_query):
    markup = types.InlineKeyboardMarkup()
    bat_a = types.InlineKeyboardButton(text='–û–¢–ú–ï–ù–ê', callback_data='otemena')
    markup.add(bat_a)

    await bot.send_message(call.message.chat.id, text='–û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ –Ω–æ–≤—ã–π, —à–µ—Å—Ç–æ–π –ø–æ —Å—á–µ—Ç—É –∫–∞–Ω–∞–ª\n',
                           parse_mode='html', reply_markup=markup)
    await reg_trafik6.traf1.set()


@dp.message_handler(state=reg_trafik6.traf1, content_types='text')
async def traf_obnovlenie53(message: types.Message, state: FSMContext):
    await state.update_data(link_one=message.text)
    await bot.send_message(chat_id=message.chat.id,
                           text=f'–¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ—à–ª–∏ –º–Ω–µ –ª—é–±–æ–π –ø–æ—Å—Ç –∏–∑ —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞ ({message.text})')
    await reg_trafik6.traf2.set()


@dp.message_handler(state=reg_trafik6.traf2, content_types=['text', 'photo', 'video'])
async def traf_obnovlenie_53(message: types.Message, state: FSMContext):
    link = await state.get_data()

    link_one = link['link_one']  # –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª
    id_channel5 = (message.forward_from_chat.id)  # ID –∫–∞–Ω–∞–ª–∞

    try:
        obnovatrafika6(link_one, id_channel5)  # –í–Ω–µ—Å–µ–Ω–∏–µ 5-–≥–æ –Ω–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö

        await bot.send_message(chat_id=message.chat.id, text='–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ')
        try:
            await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
        except:
            pass
        await state.finish()

    except:
        await bot.send_message(chat_id=message.chat.id,
                               text='–û—à–∏–±–∫–∞! –í—ã —Å–¥–µ–ª–∞–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–Ω–æ–≤–∞ –∑–∞–π—Ç–∏ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –∏ –≤—ã–±—Ä–∞—Ç—å –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç')
        await state.finish()


# –†–ï–î–ê–ö–¢–ò–†–£–ï–ú —á–µ—Ç–≤–µ—Ä—Ç—ã–π –ö–ê–ù–ê–õ
@dp.callback_query_handler(text='change_trafik7')  # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è
async def baza12342_54(call: types.callback_query):
    markup = types.InlineKeyboardMarkup()
    bat_a = types.InlineKeyboardButton(text='–û–¢–ú–ï–ù–ê', callback_data='otemena')
    markup.add(bat_a)

    await bot.send_message(call.message.chat.id, text='–û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ –Ω–æ–≤—ã–π, —Å–µ–¥—å–º–æ–π –ø–æ —Å—á–µ—Ç—É –∫–∞–Ω–∞–ª\n',
                           parse_mode='html', reply_markup=markup)
    await reg_trafik7.traf1.set()


@dp.message_handler(state=reg_trafik7.traf1, content_types='text')
async def traf_obnovlenie54(message: types.Message, state: FSMContext):
    await state.update_data(link_one=message.text)
    await bot.send_message(chat_id=message.chat.id,
                           text=f'–¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ—à–ª–∏ –º–Ω–µ –ª—é–±–æ–π –ø–æ—Å—Ç –∏–∑ —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞ ({message.text})')
    await reg_trafik7.traf2.set()


@dp.message_handler(state=reg_trafik7.traf2, content_types=['text', 'photo', 'video'])
async def traf_obnovlenie_54(message: types.Message, state: FSMContext):
    link = await state.get_data()

    link_one = link['link_one']  # –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª
    id_channel5 = (message.forward_from_chat.id)  # ID –∫–∞–Ω–∞–ª–∞

    try:
        obnovatrafika7(link_one, id_channel5)  # –í–Ω–µ—Å–µ–Ω–∏–µ 5-–≥–æ –Ω–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö

        await bot.send_message(chat_id=message.chat.id, text='–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ')
        try:
            await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
        except:
            pass
        await state.finish()

    except:
        await bot.send_message(chat_id=message.chat.id,
                               text='–û—à–∏–±–∫–∞! –í—ã —Å–¥–µ–ª–∞–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–Ω–æ–≤–∞ –∑–∞–π—Ç–∏ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –∏ –≤—ã–±—Ä–∞—Ç—å –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç')
        await state.finish()


# –†–ï–î–ê–ö–¢–ò–†–£–ï–ú –ø—è—Ç—ã–π –ö–ê–ù–ê–õ
@dp.callback_query_handler(text='change_trafik8')  # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è
async def baza12342_55(call: types.callback_query):
    markup = types.InlineKeyboardMarkup()
    bat_a = types.InlineKeyboardButton(text='–û–¢–ú–ï–ù–ê', callback_data='otemena')
    markup.add(bat_a)

    await bot.send_message(call.message.chat.id, text='–û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ –Ω–æ–≤—ã–π, –≤–æ—Å—å–º–æ–π –ø–æ —Å—á–µ—Ç—É –∫–∞–Ω–∞–ª\n',
                           parse_mode='html', reply_markup=markup)
    await reg_trafik8.traf1.set()


@dp.message_handler(state=reg_trafik8.traf1, content_types='text')
async def traf_obnovlenie55(message: types.Message, state: FSMContext):
    await state.update_data(link_one=message.text)
    await bot.send_message(chat_id=message.chat.id,
                           text=f'–¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ—à–ª–∏ –º–Ω–µ –ª—é–±–æ–π –ø–æ—Å—Ç –∏–∑ —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞ ({message.text})')
    await reg_trafik8.traf2.set()


@dp.message_handler(state=reg_trafik8.traf2, content_types=['text', 'photo', 'video'])
async def traf_obnovlenie_55(message: types.Message, state: FSMContext):
    link = await state.get_data()

    link_one = link['link_one']  # –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª
    id_channel5 = (message.forward_from_chat.id)  # ID –∫–∞–Ω–∞–ª–∞

    try:
        obnovatrafika8(link_one, id_channel5)  # –í–Ω–µ—Å–µ–Ω–∏–µ 5-–≥–æ –Ω–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö

        await bot.send_message(chat_id=message.chat.id, text='–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ')
        try:
            await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
        except:
            pass
        await state.finish()

    except:
        await bot.send_message(chat_id=message.chat.id,
                               text='–û—à–∏–±–∫–∞! –í—ã —Å–¥–µ–ª–∞–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–Ω–æ–≤–∞ –∑–∞–π—Ç–∏ –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –∏ –≤—ã–±—Ä–∞—Ç—å –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç')
        await state.finish()


# –ö–æ–Ω–µ—Ü –æ–±–Ω–æ–≤–ª—è–ª–∫–∏ –∫–∞–Ω–∞–ª–æ–≤

@dp.callback_query_handler(text='baza')
async def baza(call: types.callback_query):
    a = open('server.db', 'rb')
    await bot.send_document(chat_id=call.message.chat.id, document=a)


@dp.callback_query_handler(text='list_members')  # –ê–î–ú–ò–ù –ö–ù–û–ü–ö–ê –¢–†–ê–§–ò–ö–ê
async def check(call: types.callback_query):
    a = info_members()  # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞ sqlit
    await bot.send_message(call.message.chat.id, f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {a}')


########################  –†–∞—Å—Å—ã–ª–∫–∞  ################################
@dp.callback_query_handler(text='write_message')  # –ê–î–ú–ò–ù –ö–ù–û–ü–ö–ê –†–∞—Å—Å—ã–ª–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
async def check(call: types.callback_query, state: FSMContext):
    murkap = types.InlineKeyboardMarkup()
    bat0 = types.InlineKeyboardButton(text='–í—Å–µ–º', callback_data='rasl_all')
    bat1 = types.InlineKeyboardButton(text='–ö—Ç–æ –ø—Ä–æ—à–µ–ª –≤—Å–µ –ø—Ä–æ–≥—Ä–µ–≤—ã', callback_data='rasl_activ')
    bat2 = types.InlineKeyboardButton(text='–ö—Ç–æ –ø—Ä–æ–≥—Ä–µ–≤–∞–µ—Ç—Å—è', callback_data='rasl_pasiv')
    murkap.add(bat0)
    murkap.add(bat1)
    murkap.add(bat2)

    await bot.send_message(call.message.chat.id, '–ö–æ–º—É –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É?', reply_markup=murkap)
    await bot.answer_callback_query(call.id)


@dp.callback_query_handler(text_startswith='rasl_')  # –ê–î–ú–ò–ù –ö–ù–û–ü–ö–ê –†–∞—Å—Å—ã–ª–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
async def check(call: types.callback_query, state: FSMContext):
    if call.data == 'rasl_all':
        await state.update_data(rasl='all')
    if call.data == 'rasl_activ':
        await state.update_data(rasl='activ')
    if call.data == 'rasl_pasiv':
        await state.update_data(rasl='pasiv')

    murkap = types.InlineKeyboardMarkup()
    bat0 = types.InlineKeyboardButton(text='–û–¢–ú–ï–ù–ê', callback_data='otemena')
    murkap.add(bat0)
    await bot.send_message(call.message.chat.id, '–ü–µ—Ä–µ—à–ª–∏ –º–Ω–µ —É–∂–µ –≥–æ—Ç–æ–≤—ã–π –ø–æ—Å—Ç –∏ —è —Ä–∞–∑–æ—à–ª—é –µ–≥–æ –≤—Å–µ–º —é–∑–µ—Ä–∞–º',
                           reply_markup=murkap)
    await st_reg.step_q.set()
    await bot.answer_callback_query(call.id)


@dp.callback_query_handler(text='otemena', state='*')
async def otmena_12(call: types.callback_query, state: FSMContext):
    await bot.send_message(call.message.chat.id, '–û—Ç–º–µ–Ω–µ–Ω–æ')
    await state.finish()
    await bot.answer_callback_query(call.id)


@dp.message_handler(state=st_reg.step_q,
                    content_types=['text', 'photo', 'video', 'video_note', 'voice'])  # –ü—Ä–µ–¥–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–∞
async def redarkt_post(message: types.Message, state: FSMContext):
    await st_reg.st_name.set()
    murkap = types.InlineKeyboardMarkup()
    bat0 = types.InlineKeyboardButton(text='–û–¢–ú–ï–ù–ê', callback_data='otemena')
    bat1 = types.InlineKeyboardButton(text='–†–ê–ó–û–°–õ–ê–¢–¨', callback_data='send_ras')
    bat2 = types.InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏', callback_data='add_but')
    murkap.add(bat1)
    murkap.add(bat2)
    murkap.add(bat0)

    await message.copy_to(chat_id=message.chat.id)
    q = message
    await state.update_data(q=q)

    await bot.send_message(chat_id=message.chat.id, text='–ü–æ—Å—Ç —Å–µ–π—á–∞—Å –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫ üëÜ', reply_markup=murkap)


# –ù–ê–°–¢–†–û–ô–ö–ê –ö–ù–û–ü–û–ö
@dp.callback_query_handler(text='add_but', state=st_reg.st_name)  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
async def addbutton(call: types.callback_query, state: FSMContext):
    await bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
    await bot.send_message(call.message.chat.id, text='–û—Ç–ø—Ä–∞–≤–ª—è–π –º–Ω–µ –∫–Ω–æ–ø–∫–∏ –ø–æ –ø—Ä–∏–Ω—Ü–∏–ø—É Controller Bot')
    await st_reg.step_regbutton.set()
    await bot.answer_callback_query(call.id)


@dp.message_handler(state=st_reg.step_regbutton, content_types=['text'])  # –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–æ–∫ –≤ –Ω–µ—Ñ–æ—Ä–º–∞—Ç–µ
async def redarkt_button(message: types.Message, state: FSMContext):
    arr3 = message.text.split('\n')
    murkap = types.InlineKeyboardMarkup()  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏

    massiv_text = []
    massiv_url = []

    for but in arr3:
        new_but = but.split('-')
        massiv_text.append(new_but[0][:-1])
        massiv_url.append(new_but[1][1:])
        bat9 = types.InlineKeyboardButton(text=new_but[0][:-1], url=new_but[1][1:])
        murkap.add(bat9)

    try:
        data = await state.get_data()
        mess = data['q']  # ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏

        await bot.copy_message(chat_id=message.chat.id, from_chat_id=message.chat.id, message_id=mess.message_id,
                               reply_markup=murkap)

        await state.update_data(text_but=massiv_text)  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –°–µ—Ç–∞
        await state.update_data(url_but=massiv_url)  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –°–µ—Ç–∞

        murkap2 = types.InlineKeyboardMarkup()  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ - –º–µ–Ω—é
        bat0 = types.InlineKeyboardButton(text='–û–¢–ú–ï–ù–ê', callback_data='otemena')
        bat1 = types.InlineKeyboardButton(text='–†–ê–ó–û–°–õ–ê–¢–¨', callback_data='send_ras')
        murkap2.add(bat1)
        murkap2.add(bat0)

        await bot.send_message(chat_id=message.chat.id, text='–¢–µ–ø–µ—Ä—å —Ç–≤–æ–π –ø–æ—Å—Ç –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫‚òù', reply_markup=murkap2)


    except:
        await bot.send_message(chat_id=message.chat.id, text='–û—à–∏–±–∫–∞. –û—Ç–º–µ–Ω–µ–Ω–æ')
        await state.finish()


# –ö–û–ù–ï–¶ –ù–ê–°–¢–†–û–ô–ö–ò –ö–ù–û–ü–û–ö


@dp.callback_query_handler(text='send_ras', state="*")  # –†–∞—Å—Å—ã–ª–∫–∞
async def fname_step(call: types.callback_query, state: FSMContext):
    await bot.delete_message(chat_id=call.message.chat.id, message_id=call.message.message_id)
    data = await state.get_data()
    mess = data['q']  # –°–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
    rasl = data['rasl']  # –°–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏

    murkap = types.InlineKeyboardMarkup()  # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    try:  # –ü—ã—Ç–∞–µ–º—Å—è –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏. –ï—Å–ª–∏ –∏—Ö –Ω–µ—Ç—É –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–ª–∞–≤—É –ø—É—Å—Ç–æ–π
        text_massiv = data['text_but']
        url_massiv = data['url_but']
        for t in text_massiv:
            for u in url_massiv:
                bat = types.InlineKeyboardButton(text=t, url=u)
                murkap.add(bat)
                break

    except:
        pass

    db = sqlite3.connect('server.db')
    sql = db.cursor()
    await state.finish()
    users = sql.execute("SELECT id FROM user_time").fetchall()
    bad = 0
    good = 0
    delit = 0
    await bot.send_message(call.message.chat.id,
                           f"<b>–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <code>{len(users)}</code></b>\n\n<b>–†–∞—Å—Å–ª—ã–∫–∞ –Ω–∞—á–∞—Ç–∞!</b>",
                           parse_mode="html")

    if rasl == 'all':
        users = sql.execute("SELECT id FROM user_time").fetchall()
        for i in users:
            await asyncio.sleep(0.03)
            try:
                await mess.copy_to(i[0], reply_markup=murkap)
                good += 1
            except (BotBlocked, ChatNotFound):
                try:
                    delite_user(i[0])
                    delit += 1

                except:
                    pass
            except:
                bad += 1

    if rasl == 'activ':
        users = sql.execute("SELECT id FROM user_time WHERE status_ref = '0' ").fetchall()
        for i in users:
            await asyncio.sleep(0.03)
            try:
                await mess.copy_to(i[0], reply_markup=murkap)
                good += 1
            except (BotBlocked, ChatNotFound):
                try:
                    delite_user(i[0])
                    delit += 1

                except:
                    pass
            except:
                bad += 1

    if rasl == 'pasiv':
        users = sql.execute("SELECT id FROM user_time WHERE status = '1' ").fetchall()
        for i in users:
            await asyncio.sleep(0.03)
            try:
                await mess.copy_to(i[0], reply_markup=murkap)
                good += 1
            except (BotBlocked, ChatNotFound):
                try:
                    delite_user(i[0])
                    delit += 1

                except:
                    pass
            except:
                bad += 1
    await bot.send_message(
        call.message.chat.id,
        "<u>–†–∞—Å—Å—ã–ª–∫–∞ –æ–∫–æ–Ω—á–µ–Ω–∞\n\n</u>"
        f"<b>–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> <code>{len(users)}</code>\n"
        f"<b>–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:</b> <code>{good}</code>\n"
        f"<b>–£–¥–∞–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b> <code>{delit}</code>\n"
        f"<b>–ü—Ä–æ–∏–∑–æ—à–ª–æ –æ—à–∏–±–æ–∫:</b> <code>{bad}</code>",
        parse_mode="html"
    )
    await bot.answer_callback_query(call.id)
#########################################################
